package trabalho;

import java.util.stream.LongStream;

import estruturas.Promissoria;
import utilitarios.Arquivo;
import utilitarios.Data;

public class Trabalho {

	public static void main(String[] args) {
		// Lista();
		ArvoreABB();
	}

	public static void Lista() {

		int qtdVezes = 5;
		long[] tempos = new long[qtdVezes];
		String[] arquivos = { "aquecimento.txt", "promissoria500alea.txt", "promissoria500inv.txt",
				"promissoria500ord.txt", "promissoria1000alea.txt", "promissoria1000inv.txt", "promissoria1000ord.txt",
				"promissoria5000alea.txt", "promissoria5000inv.txt", "promissoria5000ord.txt",
				"promissoria10000alea.txt", "promissoria10000inv.txt", "promissoria10000ord.txt",
				"promissoria50000alea.txt", "promissoria50000inv.txt", "promissoria50000ord.txt" };

		for (String arquivo : arquivos) {
			System.out.println("Arquivo: " + arquivo + " ------------");

			for (int i = 0; i < qtdVezes; i++) {
				long tempoInicio = System.currentTimeMillis();

				PromissoriaTabela lista = new PromissoriaTabela();
				lista.Carregar(arquivo);
				lista.QuickSort();
				lista.Salvar("quicksort.txt");
				lista.PesquisarDatas();

				tempos[i] = System.currentTimeMillis() - tempoInicio;
			}

			long soma = LongStream.of(tempos).sum();

			System.out.println("Media tempo: " + soma / qtdVezes + " ms");
			System.out.println("-------------------");
		}
	}

	public static void ArvoreABB() {
		int qtdVezes = 1;
		long[] tempos = new long[qtdVezes];
		String[] arquivos = { "promissoria1000inv.txt" };

		for (String arquivo : arquivos) {
			System.out.println("Arquivo: " + arquivo + " ------------");

			for (int i = 0; i < qtdVezes; i++) {
				long tempoInicio = System.currentTimeMillis();

				PromissoriaABB arvore = new PromissoriaABB();
				try {
					String[] linhas = Arquivo.LerLinhas(arquivo);

					for (int j = 0; j < linhas.length; j++) {
						String[] valores = linhas[j].split(";");

						Promissoria p = new Promissoria();
						p.Vencimento = Data.Converter(valores[0]);
						p.Nome = valores[1];
						p.CPF = valores[2];
						p.Valor = Double.parseDouble(valores[3]);
						p.Pago = Boolean.parseBoolean(valores[4]);

						arvore.insere(p);

						if (i % 10000 == 0) {
							arvore = arvore.ArvoreBalanceada(arvore.CamCentral());
						}
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			    arvore.PesquisarDatas();
				//arvore.Mostra();

				// lista.QuickSort();
				// lista.Salvar("quicksort.txt");
				// lista.PesquisarDatas();
				//
				tempos[i] = System.currentTimeMillis() - tempoInicio;
			}

			long soma = LongStream.of(tempos).sum();

			System.out.println("Media tempo: " + soma / qtdVezes + " ms");
			System.out.println("-------------------");
		}
	}
	
	public static void ArvoreAVL(){
	}
	}
}

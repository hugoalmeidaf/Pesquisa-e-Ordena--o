package trabalho;

import estruturas.NoArvore;
import estruturas.Nodo;
import estruturas.Promissoria;
import utilitarios.Arquivo;
import utilitarios.Data;

public class AVL {
	private Nodo raiz;
	private boolean h;

	public AVL() {
		this.raiz = null;
		this.h = true;
	}

	public void insereRaiz(Promissoria elem) {
		this.raiz = this.insere(elem, this.raiz);
	}

	private Nodo insere(Promissoria elem, Nodo no) {
		if (no == null) {
			Nodo novo = new Nodo(elem);
			this.h = true;
			return novo;
		} else {
			if (Data.Comparar(elem.getChave(), no.getPromissoria().getChave()) < 0) {
				// Insere à esquerda e verifica se precisa balancear à direita
				no.setEsq(this.insere(elem, no.getEsq()));
				no = this.balancearDir(no);
				return no;
			} else if (Data.Comparar(elem.getChave(), no.getPromissoria().getChave()) > 0) {
				// Insere à direita e verifica se precisa balancear à esquerda
				no.setDir(this.insere(elem, no.getDir()));
				no = this.balancearEsq(no);
				return no;
			} else {
				// Insere no mesmo nó se for igual
				no.insere(elem);
				return no;
			}
		}
	}

	private Nodo balancearDir(Nodo no) {
		if (this.h)
			switch (no.getFatorBalanceamento()) {
			case 1:
				no.setFatorBalanceamento((byte) 0);
				this.h = false;
				break;
			case 0:
				no.setFatorBalanceamento((byte) -1);
				break;
			case -1:
				no = this.rotaçãoDireita(no);
			}
		return no;
	}

	private Nodo balancearEsq(Nodo no) {
		if (this.h)
			switch (no.getFatorBalanceamento()) {
			case -1:
				no.setFatorBalanceamento((byte) 0);
				this.h = false;
				break;
			case 0:
				no.setFatorBalanceamento((byte) 1);
				break;
			case 1:
				no = this.rotaçãoEsquerda(no);
			}
		return no;
	}

	private Nodo rotaçãoDireita(Nodo no) {
		Nodo temp1, temp2;
		temp1 = no.getEsq();
		if (temp1.getFatorBalanceamento() == -1) {
			no.setEsq(temp1.getDir());
			temp1.setDir(no);
			no.setFatorBalanceamento((byte) 0);
			no = temp1;
		} else {
			temp2 = temp1.getDir();
			temp1.setDir(temp2.getEsq());
			temp2.setEsq(temp1);
			no.setEsq(temp2.getDir());
			temp2.setDir(no);
			if (temp2.getFatorBalanceamento() == -1)
				no.setFatorBalanceamento((byte) 1);
			else
				no.setFatorBalanceamento((byte) 0);
			if (temp2.getFatorBalanceamento() == 1)
				temp1.setFatorBalanceamento((byte) -1);
			else
				temp1.setFatorBalanceamento((byte) 0);
			no = temp2;
		}
		no.setFatorBalanceamento((byte) 0);
		this.h = false;
		return no;
	}

	private Nodo rotaçãoEsquerda(Nodo no) {
		Nodo temp1, temp2;
		temp1 = no.getDir();
		if (temp1.getFatorBalanceamento() == 1) {
			no.setDir(temp1.getEsq());
			temp1.setEsq(no);
			no.setFatorBalanceamento((byte) 0);
			no = temp1;
		} else {
			temp2 = temp1.getEsq();
			temp1.setEsq(temp2.getDir());
			temp2.setDir(temp1);
			no.setDir(temp2.getEsq());
			temp2.setEsq(no);
			if (temp2.getFatorBalanceamento() == 1)
				no.setFatorBalanceamento((byte) -1);
			else
				no.setFatorBalanceamento((byte) 0);
			if (temp2.getFatorBalanceamento() == -1)
				temp1.setFatorBalanceamento((byte) 1);
			else
				temp1.setFatorBalanceamento((byte) 0);
			no = temp2;
		}
		no.setFatorBalanceamento((byte) 0);
		this.h = false;
		return no;
	}

	public void Carregar(String nomearquivo) {
		try {
			String[] linhas = Arquivo.LerLinhas(nomearquivo);

			for (int j = 0; j < linhas.length; j++) {
				String[] valores = linhas[j].split(";");

				Promissoria p = new Promissoria();
				p.Vencimento = Data.Converter(valores[0]);
				p.Nome = valores[1];
				p.CPF = valores[2];
				p.Valor = Double.parseDouble(valores[3]);
				p.Pago = Boolean.parseBoolean(valores[4]);

				this.insereRaiz(p);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void Mostra(NoArvore no) {
		if (no != null) {
			System.out.println(no.getPromissoria().resumo());
			System.out.println("ESQ");
			Mostra(no.getEsq());
			System.out.println("DIR");
			Mostra(no.getDir());
		}
	}

}
